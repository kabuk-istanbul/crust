<?php

$labels = [
	'name' => __('{{postType.labels.name}}', '{{theme.slug}}'),
	'singular_name' => __('{{postType.labels.singular_name}}', '{{theme.slug}}'),
	'add_new' => __('{{postType.labels.add_new}}', '{{theme.slug}}'),
	'add_new_item' => __('{{postType.labels.add_new_item}}', '{{theme.slug}}'),
	'edit_item' => __('{{postType.labels.edit_item}}', '{{theme.slug}}'),
	'new_item' => __('{{postType.labels.new_item}}', '{{theme.slug}}'),
	'view_item' => __('{{postType.labels.view_item}}', '{{theme.slug}}'),
	'view_items' => __('{{postType.labels.view_items}}', '{{theme.slug}}'),
	'search_items' => __('{{postType.labels.search_items}}', '{{theme.slug}}'),
	'not_found' => __('{{postType.labels.not_found}}', '{{theme.slug}}'),
	'not_found_in_trash' => __('{{postType.labels.not_found_in_trash}}', '{{theme.slug}}'),
	'parent_item_colon' => __('{{postType.labels.parent_item_colon}}', '{{theme.slug}}'),
	'all_items' => __('{{postType.labels.all_items}}', '{{theme.slug}}'),
	'archives' => __('{{postType.labels.archives}}', '{{theme.slug}}'),
	'attributes' => __('{{postType.labels.attributes}}', '{{theme.slug}}'),
	'insert_into_item' => __('{{postType.labels.insert_into_item}}', '{{theme.slug}}'),
	'uploaded_to_this_item' => __('{{postType.labels.uploaded_to_this_item}}', '{{theme.slug}}'),
	'menu_name' => __('{{postType.labels.menu_name}}', '{{theme.slug}}'),
];

$options = [
	'menu_position' => {{postType.settings.menu_position}},
	'supports' => ['title', 'editor', 'thumbnail', 'page-attributes'],
	'has_archive' => {{#postType.settings.has_archive}}TRUE{{/postType.settings.has_archive}}{{^postType.settings.has_archive}}FALSE{{/postType.settings.has_archive}},
	'show_in_nav_menus' => {{#postType.settings.show_in_nav_menus}}TRUE{{/postType.settings.show_in_nav_menus}}{{^postType.settings.show_in_nav_menus}}FALSE{{/postType.settings.show_in_nav_menus}},
	'public' => {{#postType.settings.public}}TRUE{{/postType.settings.public}}{{^postType.settings.public}}FALSE{{/postType.settings.public}},
	'rewrite' => ['slug' => '{{postType.slug}}', 'with_front' => FALSE],
	'capability_type' => '{{postType.settings.capability_type}}',
	'labels' => $labels,
    {{#postType.hasMeta}}'register_meta_box_cb' => '{{theme.id}}_{{postType.id}}_meta_boxes'{{/postType.hasMeta}}
];

register_post_type('{{postType.slug}}', $options);

{{#postType.hasMeta}}
function {{theme.id}}_{{postType.id}}_meta_boxes()
{
    {{#postType.metas}}
    add_meta_box('{{postType.id}}_{{id}}', '{{name}}', '{{theme.id}}_{{postType.id}}_{{id}}_box', '{{postType.slug}}', '{{position}}', 'default');
    {{/postType.metas}}
}

{{#postType.metas}}
function {{theme.id}}_{{postType.id}}_{{id}}_box($post)
{
    {{#isString}}
    {{>meta-string-type}}
    {{/isString}}
    {{#isKeyValue}}
    {{>meta-key-value-type}}
    {{/isKeyValue}}
}

{{/postType.metas}}
{{/postType.hasMeta}}
function {{theme.id}}_{{postType.id}}_save($post_id)
{
    {{#postType.metas}}
    {{#isSingle}}
    {{>meta-single-save}}
    {{/isSingle}}
    {{^isSingle}}
    {{>meta-multiple-save}}
    {{/isSingle}}
    {{/postType.metas}}

}
{{#postType.hasMetaInColumns}}

add_filter('manage_{{postType.id}}_posts_columns', '{{theme.id}}_{{postType.id}}_table_head');
add_action('manage_{{postType.id}}_posts_custom_column', '{{theme.id}}_{{postType.id}}_table_content', 10, 2);
add_filter('manage_edit-{{postType.id}}_sortable_columns', '{{theme.id}}_{{postType.id}}_table_sorting');

function {{theme.id}}_{{postType.id}}_table_head($defaults)
{
    {{#postType.metas}}
    {{#hasColumn}}
    $defaults['{{postType.id}}_{{id}}']  = __('{{name}}', '{{theme.slug}}');
    {{/hasColumn}}
    {{/postType.metas}}
    return $defaults;
}

function {{theme.id}}_{{postType.id}}_table_content($column_name, $post_id)
{
    {{#postType.metas}}
    {{#hasColumn}}
    if ($column_name == '{{postType.id}}_{{id}}') {
        ${{postType.id}}_{{id}} = get_post_meta($post_id, '{{id}}', true);
        echo ${{postType.id}}_{{id}};
    }
    {{/hasColumn}}
    {{/postType.metas}}
}

function {{theme.id}}_{{postType.id}}_table_sorting($columns)
{
    {{#postType.metas}}
    {{#hasColumn}}
    $columns['{{postType.id}}_{{id}}']  = '{{postType.id}}_{{id}}';
    {{/hasColumn}}
    {{/postType.metas}}
    return $columns;
}
{{#postType.metas}}
{{#hasColumn}}

add_filter('request', '{{theme.id}}_{{postType.id}}_{{id}}_column_orderby');

function {{theme.id}}_{{postType.id}}_{{id}}_column_orderby($vars)
{
    if (isset($vars['orderby']) && '{{postType.id}}_{{id}}' == $vars['orderby']) {
        $vars = array_merge($vars, [
            'meta_key' => '{{id}}',
            'orderby' => 'meta_value'
        ]);
    }
    return $vars;
}
{{/hasColumn}}
{{/postType.metas}}
{{/postType.hasMetaInColumns}}